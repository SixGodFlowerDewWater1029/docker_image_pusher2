name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"
  GO_VERSION: 1.17
  CGO_ENABLED: 0
  GO111MODULE: on

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: false
        dotnet: true
        haskell: true
        large-packages: false
        docker-images: false
        swap-storage: false

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: |
        go mod tidy

    - name: Build binary
      run: |
        go build -o ./m3u8-downloader m3u8-downloader.go
        chmod 0755 m3u8-downloader
        pwd
        ls -alH

    - name: Download
      run: |
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
          echo "$line"
          df -hT
          ./m3u8-downloader -u=$line -o=linux
          pwd
          tar -czf linux.tar.gz linux.mp4
          df -hT
          rm -rf linux.mp4
          df -hT
        done < resources.txt

    - name: Build and push image Aliyun
      run: |
        echo "$ALIYUN_REGISTRY_PASSWORD" | docker login -u $ALIYUN_REGISTRY_USER --password-stdin $ALIYUN_REGISTRY
        
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            #echo "docker pull $line"
            #docker pull $line
            
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')

            # 获取 镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            # 获取命名空间 例如kasmweb  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            # 获取镜像名例  例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            
            echo "FROM $line\nWORKDIR /usr/share/nginx/html\nCOPY ./linux.tar.gz .\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]" | tee Dockerfile
            docker build -t $image .

            name_space_prefix=""
            # 将@sha256:等字符删除
            image_name_tag="${image_name_tag%%@*}"
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$name_space_prefix$image_name_tag"
            echo "docker tag $image $new_image"
            docker tag $image $new_image
            echo "docker push $new_image"
            docker push $new_image
            echo "开始清理磁盘空间"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="
            docker rmi $image
            docker rmi $new_image
            echo "磁盘空间清理完毕"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="     
            
        done < images.txt
